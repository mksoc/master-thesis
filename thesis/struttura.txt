Introduzione e inquadramento:
  - Progetto complessivo
  - Perchè RISC-V
  - Perchè OoO

Stato dell'arte:
  - Panoramica delle ISA
  - Dynamic vs static scheduling
    - In-order vs OoO issue
    - In-order vs OoO execution
    - In order vs OoO completion
  - Speculation
  - SOTA branch predictor
    - TAGE based
    - NN based
  - Panoramica di altri core open source a non
    - BOOM
    - PULP (Ariane)

Soluzione proposta:
  - Schema generale frontend
  - PC gen stage
    - Possibili sorgenti di PC
  - Fetch stage
    - Branch prediction unit
      - Gshare
      - BTB
    - Interfaccia con la cache
      - Protocollo AXI
    - Fetch unit
      - Selezione delle istruzioni
        - Presence checker
        - Instruction selector
      - Control unit
  - Execution stage
    - Branch unit

Risultati sperimentali:
  - Simulazione
    - Fetch unit
    - Modello python della BPU
  - Sintesi?

Conclusioni: